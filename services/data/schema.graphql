# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Client {
  id: ID!
  name: String!
  scope: String
  clientId: String!
  clientSecret: String!
}

type ClientEvent {
  type: String!
  payload: Client!
}

type Connection {
  id: ID!
  user: User!
  remoteId: String!
  provider: Provider!
  scope: String!
  token: String!
}

type ConnectionEvent {
  type: String!
  payload: Connection!
}

input ConnectionInput {
  provider: ID!
  state: String!
  code: String!
}

input CreateClientInput {
  name: String!
  scope: String!
  clientId: String!
  clientSecret: String!
}

input CreateProviderInput {
  name: String!
  scope: String
  authUrl: CreateResourceInput!
  userUrl: CreateResourceInput!
  tokenUrl: CreateResourceInput!
}

input CreateProvisionInput {
  name: String!
  scope: String!
  provider: String!
  clientId: String!
  clientSecret: String!
}

input CreateResourceInput {
  name: String!
  method: String!
  endpoint: String!
  provider: String!
  params: String
  headers: String
  queryParams: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  updateUser(input: UpdateUserInput!, id: ID!): User!
  deleteUser(id: ID!): String!
  deleteToken(id: ID!): String!
  createClient(input: CreateClientInput!): Client!
  updateClient(input: UpdateClientInput!, id: ID!): Client!
  deleteClient(id: ID!): String!
  createSignIn(input: SignInInput!): Token!
  createSignUp(input: SignUpInput!): Token!
  createProvider(input: CreateProviderInput!): Provider!
  updateProvider(input: UpdateProviderInput!, id: ID!): Provider!
  deleteProvider(id: ID!): String!
  createResource(input: CreateResourceInput!): Resource!
  updateResource(input: UpdateResourceInput!, id: ID!): Resource!
  deleteResource(id: ID!): String!
  createProvision(input: CreateProvisionInput!): Provision!
  updateProvision(input: UpdateProvisionInput!, id: ID!): Provision!
  deleteProvision(id: ID!): String!
  createConnection(input: ConnectionInput!): Connection!
  deleteConnection(id: ID!): String!
}

type Provider {
  id: ID!
  name: String!
  scope: String
  authUrl: Resource!
  userUrl: Resource!
  tokenUrl: Resource!
}

type ProviderEvent {
  type: String!
  payload: Provider!
}

type Provision {
  id: ID!
  name: String!
  clientId: String!
  clientSecret: String!
  client: Client!
  provider: Provider!
}

type ProvisionEvent {
  type: String!
  payload: Provision!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  tokens: [Token!]!
  token(id: ID!): [Token!]!
  clients: [Client!]!
  client(id: ID!): Client!
  signIns: [SignIn!]!
  signIn(id: ID!): SignIn!
  signUps: [SignUp!]!
  signUp(id: ID!): SignUp!
  providers: [Provider!]!
  provider(id: ID!): Provider!
  resources: [Resource!]!
  resource(id: ID!): Resource!
  provisions: [Provision!]!
  provision(id: ID!): Provision!
  connections: [Connection!]!
}

type Resource {
  id: ID!
  name: String!
  method: String!
  endpoint: String!
  provider: Provider!
  params: String
  headers: String
  queryParams: String
}

type ResourceEvent {
  type: String!
  payload: Resource!
}

type SignIn {
  id: ID!
  user: User!
  token: Token!
  connection: Connection
  username: String
}

type SignInEvent {
  type: String!
  payload: SignIn!
}

input SignInInput {
  username: String
  password: String
  connection: ConnectionInput
}

type SignUp {
  id: ID!
  user: User!
  token: Token!
  connections: [Connection!]
  email: String!
  username: String!
  avatarUrl: String
}

type SignUpEvent {
  type: String!
  payload: SignUp!
}

input SignUpInput {
  email: String!
  username: String!
  password: String!
  avatarUrl: String
  connections: [ConnectionInput!]
}

type Subscription {
  userEvent(id: ID): UserEvent!
  tokenEvent(id: ID): TokenEvent!
  clientEvent(id: ID): ClientEvent!
  signInEvent(id: ID): SignInEvent!
  signUpEvent(id: ID): SignUpEvent!
  providerEvent(id: ID): ProviderEvent!
  resourceEvent(id: ID): ResourceEvent!
  provisionEvent(id: ID): ProvisionEvent!
  connectionEvent(id: ID): ConnectionEvent!
}

type Token {
  id: ID!
  user: Token!
  accessToken: String!
  refreshToken: String!
  tokenValidity: DateTime!
  refreshValidity: DateTime!
}

type TokenEvent {
  type: String!
  payload: Token!
}

input UpdateClientInput {
  name: String!
  scope: String!
  clientId: String!
  clientSecret: String!
}

input UpdateProviderInput {
  name: String
  scope: String
  authUrl: String
  userUrl: String
  tokenUrl: String
}

input UpdateProvisionInput {
  name: String
  provider: String
  clientId: String
  clientSecret: String
}

input UpdateResourceInput {
  name: String
  method: String
  endpoint: String
  provider: String
  params: String
  headers: String
  queryParams: String
}

input UpdateUserInput {
  email: String
  username: String
  password: String
  avatarUrl: String
}

type User {
  id: ID!
  email: String!
  username: String!
  avatarUrl: String
  connections: [Connection!]
}

type UserEvent {
  type: String!
  payload: User!
}
